# Declare a vendor-specific option buffer for PXE clients:
# Code 1: Multicast IP address of boot file server
# Code 2: UDP port that client should monitor for MTFTP responses
# Code 3: UDP port that MTFTP servers are using to listen for MTFTP requests
# Code 4: Number of seconds a client must listen for activity before trying
#   to start a new MTFTP transfer
# Code 5: Number of seconds a client must listen before trying to restart
#   a MTFTP transfer

option space PXE;
option PXE.mtftp-ip               code 1 = ip-address;
option PXE.mtftp-cport            code 2 = unsigned integer 16;
option PXE.mtftp-sport            code 3 = unsigned integer 16;
option PXE.mtftp-tmout            code 4 = unsigned integer 8;
option PXE.mtftp-delay            code 5 = unsigned integer 8;
option PXE.discovery-control      code 6 = unsigned integer 8;
option PXE.discovery-mcast-addr   code 7 = ip-address;

# Provide PXE clients with appropriate information
class "pxeclient" {
    # Specifies that this class only applies to legacy PXE traffic (ie. non-EFI)
    match if substring(option vendor-class-identifier, 0, 20) = "PXEClient:Arch:00000";
    vendor-option-space PXE;

    # At least one of the vendor-specific PXE options must be set in
    # order for the client boot ROMs to realize that we are a PXE-compliant
    # server.  We set the MCAST IP address to 0.0.0.0 to tell the boot ROM
    # that we can't provide multicast TFTP.
    option PXE.mtftp-ip 0.0.0.0;

    # This is the name of the file the boot ROMs should download.
    log(debug, "Supplying image for x86 legacy BIOS");
    filename "bldr/undionly.kpxe";
}
